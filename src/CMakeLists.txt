# Add external libraries as include dirs, so we can do #include "httplib" for example
include_directories(${CMAKE_SOURCE_DIR}/external/cpp-httplib)
include_directories(${CMAKE_SOURCE_DIR}/external/cpp-linenoise)
include_directories(${CMAKE_SOURCE_DIR}/external/nlohmann-json)

# Show cmake where the source files are
# Note, if you add remove a source file, you will need to re-run cmake so it
# can find the new file
file(GLOB_RECURSE Common common/*)
file(GLOB_RECURSE Config config/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore cryptonotecore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol cryptonoteprotocol/*)
file(GLOB_RECURSE CryptoTest cryptotest/*)
file(GLOB_RECURSE Errors errors/*)
file(GLOB_RECURSE Http http/*)
file(GLOB_RECURSE JsonRpcServer jsonrpcserver/*)
file(GLOB_RECURSE Logging logging/*)
file(GLOB_RECURSE Logger logger/*)
file(GLOB_RECURSE miner miner/*)
file(GLOB_RECURSE Mnemonics mnemonics/*)
file(GLOB_RECURSE Nigel nigel/*)
file(GLOB_RECURSE NodeRpcProxy noderpcproxy/*)
file(GLOB_RECURSE P2p p2p/*)
file(GLOB_RECURSE Rpc rpc/*)
file(GLOB_RECURSE Serialization serialization/*)
file(GLOB_RECURSE SubWallets subwallets/*)
file(GLOB_RECURSE Transfers transfers/*)
file(GLOB_RECURSE DeroGoldd daemon/*)
file(GLOB_RECURSE Utilities utilities/*)
file(GLOB_RECURSE Wallet wallet/*)
file(GLOB_RECURSE WalletApi walletapi/*)
file(GLOB_RECURSE WalletBackend walletbackend/*)
file(GLOB_RECURSE WalletService walletservice/*)
file(GLOB_RECURSE WalletUpgrader walletupgrader/*)
file(GLOB_RECURSE zedwallet++ zedwallet++/*)

if(WIN32)
    file(GLOB_RECURSE System system/* platform/windows/system/*)
elseif(APPLE)
    file(GLOB_RECURSE System system/* platform/osx/system/* platform/posix/system/*)
else()
    file(GLOB_RECURSE System system/* platform/linux/system/* platform/posix/system/*)
endif()

# Group the files together in IDEs
source_group("" FILES $${Common} ${Config} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${DeroGoldd} ${JsonRpcServer} ${Http} ${Logging} ${Logger} ${miner} ${Mnemonics} ${Nigel} ${NodeRpcProxy} ${P2p} ${Rpc} ${Serialization} ${System} ${Transfers} ${Wallet} ${WalletApi} ${WalletBackend} ${WalletService} ${zedwallet++} ${CryptoTest} ${Errors} ${Utilities} ${WalletUpgrader} ${SubWallets})

# Define a group of files as a library to link against
add_library(Common STATIC ${Common})
add_library(Config STATIC ${Config})
add_library(Crypto STATIC ${Crypto})
add_library(CryptoNoteCore STATIC ${CryptoNoteCore})
add_library(Errors STATIC ${Errors})
add_library(Http STATIC ${Http})
add_library(JsonRpcServer STATIC ${JsonRpcServer})
add_library(Logging STATIC ${Logging})
add_library(Logger STATIC ${Logger})
add_library(Mnemonics STATIC ${Mnemonics})
add_library(Nigel STATIC ${Nigel})
add_library(NodeRpcProxy STATIC ${NodeRpcProxy})
add_library(P2P STATIC ${CryptoNoteProtocol} ${P2p})
add_library(Rpc STATIC ${Rpc})
add_library(Serialization STATIC ${Serialization})
add_library(SubWallets STATIC ${SubWallets})
add_library(System STATIC ${System})
add_library(Transfers STATIC ${Transfers})
add_library(Utilities STATIC ${Utilities})
add_library(Wallet STATIC ${Wallet})
add_library(WalletBackend STATIC ${WalletBackend})

if(MSVC OR MINGW)
    set(CT_SOURCES_OS binaryinfo/cryptotest.rc)
    set(MINER_SOURCES_OS binaryinfo/miner.rc)
    set(PG_SOURCES_OS binaryinfo/service.rc)
    set(DAEMON_SOURCES_OS binaryinfo/daemon.rc)
    set(WALLET_API_SOURCES_OS binaryinfo/walletapi.rc)
    set(WALLET_UPGRADER_SOURCES_OS binaryinfo/walletupgrader.rc)
    set(ZED_WALLET_SOURCES_OS binaryinfo/zedwallet.rc)
endif()

add_executable(cryptotest ${CryptoTest} ${CT_SOURCES_OS})
add_executable(miner ${miner} ${MINER_SOURCES_OS})
add_executable(WalletService ${WalletService} ${PG_SOURCES_OS})
add_executable(DeroGoldd ${DeroGoldd} ${DAEMON_SOURCES_OS})
add_executable(WalletApi ${WalletApi} ${WALLET_API_SOURCES_OS})
add_executable(WalletUpgrader ${WalletUpgrader} ${WALLET_UPGRADER_SOURCES_OS})
add_executable(zedwallet++ ${zedwallet++} ${ZED_WALLET_SOURCES_OS})

if(MSVC OR MINGW)
    target_link_libraries(System ws2_32)
    target_link_libraries(DeroGoldd Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(WalletService Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(zedwallet++ ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(WalletApi ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(miner ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(WalletUpgrader ws2_32 advapi32 crypt32 gdi32 user32)
    target_link_libraries(P2P bcrypt)
endif()

# Add the dependencies we need
target_link_libraries(Common Boost::boost)
target_link_libraries(Config rapidjson)
target_link_libraries(Crypto rapidjson)
target_link_libraries(CryptoNoteCore Common Crypto Http Logging P2P Rpc Serialization System Utilities WalletBackend Boost::boost rapidjson)
target_link_libraries(cryptotest Common Crypto rapidjson cxxopts::cxxopts)
target_link_libraries(DeroGoldd CryptoNoteCore Errors System Boost::boost cxxopts::cxxopts leveldb::leveldb OpenSSL::Crypto OpenSSL::SSL rapidjson RocksDB::rocksdb)
target_link_libraries(Errors Crypto SubWallets Utilities)
target_link_libraries(JsonRpcServer Boost::boost)
target_link_libraries(Logging Common)
target_link_libraries(Logger Boost::boost)
target_link_libraries(Mnemonics Boost::boost)
target_link_libraries(miner Crypto Errors Serialization System Utilities cxxopts::cxxopts OpenSSL::Crypto OpenSSL::SSL rapidjson)
target_link_libraries(Nigel CryptoNoteCore Errors OpenSSL::Crypto OpenSSL::SSL)
target_link_libraries(NodeRpcProxy Rpc)
target_link_libraries(P2P CryptoNoteCore Serialization System Boost::boost miniupnpc::miniupnpc)
target_link_libraries(Rpc CryptoNoteCore P2P Utilities rapidjson)
target_link_libraries(Serialization Common Crypto Boost::boost)
target_link_libraries(SubWallets Common Logger rapidjson)
target_link_libraries(Transfers CryptoNoteCore)
target_link_libraries(Utilities Common Errors rapidjson)
target_link_libraries(Wallet Common CryptoNoteCore NodeRpcProxy Transfers WalletBackend Boost::boost)
target_link_libraries(WalletApi WalletBackend cxxopts::cxxopts OpenSSL::Crypto OpenSSL::SSL)
target_link_libraries(WalletBackend Config Logger Mnemonics Nigel Serialization SubWallets Utilities Wallet cryptopp::cryptopp rapidjson)
target_link_libraries(WalletService Errors JsonRpcServer Mnemonics Wallet Boost::boost cxxopts::cxxopts OpenSSL::Crypto OpenSSL::SSL rapidjson)
target_link_libraries(WalletUpgrader Common Utilities WalletBackend cxxopts::cxxopts)
target_link_libraries(zedwallet++ WalletBackend cxxopts::cxxopts OpenSSL::Crypto OpenSSL::SSL rapidjson)

# Add dependencies means we have to build the latter before we build the former
# In this case it's because we need to have the current version name rather
# than a cached one
add_dependencies(cryptotest version)
add_dependencies(miner version)
add_dependencies(JsonRpcServer version)
add_dependencies(P2P version)
add_dependencies(Rpc version)
add_dependencies(DeroGoldd version)
add_dependencies(WalletUpgrader version)
add_dependencies(WalletApi version)
add_dependencies(WalletService version)
add_dependencies(zedwallet++ version)

# Finally build the binaries
set_property(TARGET DeroGoldd PROPERTY OUTPUT_NAME "DeroGoldd")
set_property(TARGET zedwallet++ PROPERTY OUTPUT_NAME "degwallet")
set_property(TARGET WalletService PROPERTY OUTPUT_NAME "DeroGold-service")
set_property(TARGET miner PROPERTY OUTPUT_NAME "miner")
set_property(TARGET cryptotest PROPERTY OUTPUT_NAME "cryptotest")
set_property(TARGET WalletApi PROPERTY OUTPUT_NAME "wallet-api")
set_property(TARGET WalletUpgrader PROPERTY OUTPUT_NAME "degwallet-upgrader")

# Additional make targets, can be used to build a subset of the targets
# e.g. make pool will build only DeroGoldd and service
add_custom_target(pool DEPENDS DeroGoldd WalletService)
add_custom_target(solominer DEPENDS DeroGoldd zedwallet++ miner)
add_custom_target(cli DEPENDS DeroGoldd zedwallet++)
add_custom_target(cli-wallet DEPENDS zedwallet++)

install(TARGETS DeroGoldd zedwallet++ WalletService miner WalletApi WalletUpgrader)

set(CPACK_PACKAGE_NAME "DeroGold")
set(CPACK_PACKAGE_VENDOR "The DeroGold Developers")
set(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/src/config/icon.ico")
set(CPACK_PACKAGE_DIRECTORY "${CMAKE_BINARY_DIR}/Packaging")
set(CPACK_PACKAGE_CONTACT "goldmember@derogold.com")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${SET_PACKAGE_OUTPUT_SUFFIX}")

if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    set(CPACK_GENERATOR "ZIP")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    set(CPACK_GENERATOR "TGZ;DEB")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
    set(CPACK_GENERATOR "TGZ")
endif()

include(CPack)