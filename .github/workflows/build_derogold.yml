name: Build DeroGold

on:
  push:
    branches:
      - "master"
      - "development"
  pull_request:
  workflow_dispatch:
    inputs:
      commit_id:
        description: "(Optional) Commit ID to build at"
        default: ""
        required: false
        type: string
      draft_release:
        description: 'Create a draft release'
        default: false
        required: false
        type: boolean

defaults:
  run:
    shell: pwsh

jobs:
  build_derogold:
    name: ${{ matrix.build_preset }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-13]
        arch: [x64, arm64]
        compiler: [msvc, gcc, clang]

        exclude:
          - os: windows-latest
            arch: arm64
          - os: macos-13
            arch: arm64
          - os: ubuntu-latest
            compiler: msvc
          - os: ubuntu-latest
            arch: arm64
            compiler: clang
          - os: macos-13
            compiler: msvc
          - os: macos-13
            compiler: gcc

        include:
          - os: windows-latest
            arch: x64
            compiler: msvc
            install: ""
            configure_preset: windows-x64-msvc-publish
            build_preset: windows-x64-msvc-publish

          - os: windows-latest
            arch: x64
            compiler: gcc
            install: ""
            msys2_environment: MINGW64
            msys2_install: >-
              mingw-w64-x86_64-toolchain
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja
            configure_preset: windows-x64-mingw-gcc-publish
            build_preset: windows-x64-mingw-gcc-publish

          - os: windows-latest
            arch: x64
            compiler: clang
            install: ""
            msys2_environment: CLANG64
            msys2_install: >-
              mingw-w64-clang-x86_64-toolchain
              mingw-w64-clang-x86_64-cmake
              mingw-w64-clang-x86_64-ninja
            configure_preset: windows-x64-mingw-clang-publish
            build_preset: windows-x64-mingw-clang-publish

          - os: ubuntu-latest
            arch: x64
            compiler: gcc
            install: >-
              cmake
              ninja-build
              build-essential
              curl
              zip
              unzip
              tar
              pkg-config
            configure_preset: linux-x64-gcc-publish
            build_preset: linux-x64-gcc-publish

          - os: ubuntu-latest
            arch: x64
            compiler: clang
            install: >-
              cmake
              ninja-build
              clang
              curl
              zip
              unzip
              tar
              pkg-config
            configure_preset: linux-x64-clang-publish
            build_preset: linux-x64-clang-publish

          - os: ubuntu-latest
            arch: arm64
            compiler: gcc
            install: >-
              cmake
              ninja-build
              crossbuild-essential-arm64
              curl
              zip
              unzip
              tar
              pkg-config
            configure_preset: linux-arm64-gcc-cross-publish
            build_preset: linux-arm64-gcc-cross-publish

          - os: macos-13
            arch: x64
            compiler: clang
            install: >-
              cmake
              ninja
              llvm
              pkg-config
            configure_preset: osx-x64-clang-publish
            build_preset: osx-x64-clang-publish

    outputs:
      version: ${{ steps.get_output_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_id || github.ref }}
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Install Program / Dependencies
        run: |
          if ("${{ runner.os }}" -eq "Windows")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              choco install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "Linux")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              sudo apt-get update -y
              sudo apt-get install ${{ matrix.install }} -y
            }
          }
          elseif ("${{ runner.os }}" -eq "macOS")
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.install }}"))
            {
              brew update
              brew install ${{ matrix.install }}
            }
          }

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        with:
          update: true
          install: ${{ matrix.msys2_install }}
          msystem: ${{ matrix.msys2_environment }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      - name: Build DeroGold (MSVC)
        if: runner.os == 'Windows' && matrix.compiler == 'msvc'
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }} --target package

      - name: Build DeroGold (MSYS2)
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        working-directory: ${{ github.workspace }}
        shell: msys2 {0}
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }} --target package

      - name: Build DeroGold (GCC/CLANG)
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          cmake --preset ${{ matrix.configure_preset }}
          cmake --build --preset ${{ matrix.build_preset }} --target package

      - name: Get Output Version
        id: get_output_version
        run: |
          Get-Content "CMakeLists.txt" | Select-String 'project\(DeroGold VERSION ([0-9.]+) ' | ForEach-Object { "version=" + $_.Matches[0].Groups[1].Value } >> "$env:GITHUB_OUTPUT"

      - name: Collect Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-vcpkg-build-logs
          path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
          if-no-files-found: ignore

      - name: Upload Package
        uses: actions/upload-artifact@v4
        if: success() 
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-build
          path: |
            ${{ github.workspace }}/build/Packaging/*.zip
            ${{ github.workspace }}/build/Packaging/*.tar.gz
            ${{ github.workspace }}/build/Packaging/*.deb
          if-no-files-found: ignore

  deploy_derogold:
    name: Deploy DeroGold
    runs-on: ubuntu-latest
    needs: [build_derogold]
    if: inputs.draft_release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_id || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Create artifact directory
        run: |
          New-Item 'build' -ItemType 'Directory' -Force

      - name: Download DeroGold artifact
        uses: actions/download-artifact@v4
        with:
          path: build
          merge-multiple: true

      - name: Deploy DeroGold
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}/RELEASE_TEMPLATE.md
          draft: true
          name: v${{ needs.build_derogold.outputs.version }}
          files: |
            ${{ github.workspace }}/build/*.zip
            ${{ github.workspace }}/build/*.tar.gz
            ${{ github.workspace }}/build/*.deb
